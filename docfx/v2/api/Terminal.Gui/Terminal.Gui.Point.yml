### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.Point
  commentId: T:Terminal.Gui.Point
  id: Point
  parent: Terminal.Gui
  children:
  - Terminal.Gui.Point.#ctor(System.Int32,System.Int32)
  - Terminal.Gui.Point.#ctor(Terminal.Gui.Size)
  - Terminal.Gui.Point.Add(Terminal.Gui.Point,Terminal.Gui.Size)
  - Terminal.Gui.Point.Empty
  - Terminal.Gui.Point.Equals(System.Object)
  - Terminal.Gui.Point.GetHashCode
  - Terminal.Gui.Point.IsEmpty
  - Terminal.Gui.Point.Offset(System.Int32,System.Int32)
  - Terminal.Gui.Point.Offset(Terminal.Gui.Point)
  - Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)
  - Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)
  - Terminal.Gui.Point.op_Explicit(Terminal.Gui.Point)~Terminal.Gui.Size
  - Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)
  - Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)
  - Terminal.Gui.Point.Subtract(Terminal.Gui.Point,Terminal.Gui.Size)
  - Terminal.Gui.Point.ToString
  - Terminal.Gui.Point.X
  - Terminal.Gui.Point.Y
  langs:
  - csharp
  - vb
  name: Point
  nameWithType: Point
  fullName: Terminal.Gui.Point
  type: Struct
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Point
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 18
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
  example: []
  syntax:
    content: public struct Point
    content.vb: Public Structure Point
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: Terminal.Gui.Point.X
  commentId: F:Terminal.Gui.Point.X
  id: X
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Point.X
  fullName: Terminal.Gui.Point.X
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: X
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 24
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Gets or sets the x-coordinate of this Point.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public int X
    return:
      type: System.Int32
    content.vb: >-
      <JsonInclude>

      Public X As Integer
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
- uid: Terminal.Gui.Point.Y
  commentId: F:Terminal.Gui.Point.Y
  id: Y
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Point.Y
  fullName: Terminal.Gui.Point.Y
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Y
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 30
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Gets or sets the y-coordinate of this Point.
  example: []
  syntax:
    content: >-
      [JsonInclude]

      public int Y
    return:
      type: System.Int32
    content.vb: >-
      <JsonInclude>

      Public Y As Integer
  attributes:
  - type: System.Text.Json.Serialization.JsonIncludeAttribute
    ctor: System.Text.Json.Serialization.JsonIncludeAttribute.#ctor
    arguments: []
- uid: Terminal.Gui.Point.Empty
  commentId: F:Terminal.Gui.Point.Empty
  id: Empty
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: Point.Empty
  fullName: Terminal.Gui.Point.Empty
  type: Field
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Empty
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 44
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Empty Shared Field
  remarks: An uninitialized Point Structure.
  example: []
  syntax:
    content: public static readonly Point Empty
    return:
      type: Terminal.Gui.Point
    content.vb: Public Shared ReadOnly Empty As Point
- uid: Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)
  id: op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: operator +(Point, Size)
  nameWithType: Point.operator +(Point, Size)
  fullName: Terminal.Gui.Point.operator +(Terminal.Gui.Point, Terminal.Gui.Size)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: op_Addition
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 55
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Addition Operator
  remarks: >-
    Translates a Point using the Width and Height

    properties of the given <typeref>Size</typeref>.
  example: []
  syntax:
    content: public static Point operator +(Point pt, Size sz)
    parameters:
    - id: pt
      type: Terminal.Gui.Point
    - id: sz
      type: Terminal.Gui.Size
    return:
      type: Terminal.Gui.Point
    content.vb: Public Shared Operator +(pt As Point, sz As Size) As Point
  overload: Terminal.Gui.Point.op_Addition*
  nameWithType.vb: Point.+(Point, Size)
  fullName.vb: Terminal.Gui.Point.+(Terminal.Gui.Point, Terminal.Gui.Size)
  name.vb: +(Point, Size)
- uid: Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)
  commentId: M:Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)
  id: op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: operator ==(Point, Point)
  nameWithType: Point.operator ==(Point, Point)
  fullName: Terminal.Gui.Point.operator ==(Terminal.Gui.Point, Terminal.Gui.Point)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: op_Equality
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 70
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Equality Operator
  remarks: >-
    Compares two Point objects. The return value is

    based on the equivalence of the X and Y properties 

    of the two points.
  example: []
  syntax:
    content: public static bool operator ==(Point left, Point right)
    parameters:
    - id: left
      type: Terminal.Gui.Point
    - id: right
      type: Terminal.Gui.Point
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As Point, right As Point) As Boolean
  overload: Terminal.Gui.Point.op_Equality*
  nameWithType.vb: Point.=(Point, Point)
  fullName.vb: Terminal.Gui.Point.=(Terminal.Gui.Point, Terminal.Gui.Point)
  name.vb: =(Point, Point)
- uid: Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)
  commentId: M:Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)
  id: op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: operator !=(Point, Point)
  nameWithType: Point.operator !=(Point, Point)
  fullName: Terminal.Gui.Point.operator !=(Terminal.Gui.Point, Terminal.Gui.Point)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: op_Inequality
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 85
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Inequality Operator
  remarks: >-
    Compares two Point objects. The return value is

    based on the equivalence of the X and Y properties 

    of the two points.
  example: []
  syntax:
    content: public static bool operator !=(Point left, Point right)
    parameters:
    - id: left
      type: Terminal.Gui.Point
    - id: right
      type: Terminal.Gui.Point
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(left As Point, right As Point) As Boolean
  overload: Terminal.Gui.Point.op_Inequality*
  nameWithType.vb: Point.<>(Point, Point)
  fullName.vb: Terminal.Gui.Point.<>(Terminal.Gui.Point, Terminal.Gui.Point)
  name.vb: <>(Point, Point)
- uid: Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)
  id: op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: operator -(Point, Size)
  nameWithType: Point.operator -(Point, Size)
  fullName: Terminal.Gui.Point.operator -(Terminal.Gui.Point, Terminal.Gui.Size)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: op_Subtraction
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 99
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Subtraction Operator
  remarks: >-
    Translates a Point using the negation of the Width 

    and Height properties of the given Size.
  example: []
  syntax:
    content: public static Point operator -(Point pt, Size sz)
    parameters:
    - id: pt
      type: Terminal.Gui.Point
    - id: sz
      type: Terminal.Gui.Size
    return:
      type: Terminal.Gui.Point
    content.vb: Public Shared Operator -(pt As Point, sz As Size) As Point
  overload: Terminal.Gui.Point.op_Subtraction*
  nameWithType.vb: Point.-(Point, Size)
  fullName.vb: Terminal.Gui.Point.-(Terminal.Gui.Point, Terminal.Gui.Size)
  name.vb: -(Point, Size)
- uid: Terminal.Gui.Point.op_Explicit(Terminal.Gui.Point)~Terminal.Gui.Size
  commentId: M:Terminal.Gui.Point.op_Explicit(Terminal.Gui.Point)~Terminal.Gui.Size
  id: op_Explicit(Terminal.Gui.Point)~Terminal.Gui.Size
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: explicit operator Size(Point)
  nameWithType: Point.explicit operator Size(Point)
  fullName: Terminal.Gui.Point.explicit operator Terminal.Gui.Size(Terminal.Gui.Point)
  type: Operator
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: op_Explicit
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 113
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Point to Size Conversion
  remarks: >-
    Returns a Size based on the Coordinates of a given 

    Point. Requires explicit cast.
  example: []
  syntax:
    content: public static explicit operator Size(Point p)
    parameters:
    - id: p
      type: Terminal.Gui.Point
    return:
      type: Terminal.Gui.Size
    content.vb: Public Shared Narrowing Operator CType(p As Point) As Size
  overload: Terminal.Gui.Point.op_Explicit*
  nameWithType.vb: Point.CType(Point)
  fullName.vb: Terminal.Gui.Point.CType(Terminal.Gui.Point)
  name.vb: CType(Point)
- uid: Terminal.Gui.Point.#ctor(Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Point.#ctor(Terminal.Gui.Size)
  id: '#ctor(Terminal.Gui.Size)'
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Point(Size)
  nameWithType: Point.Point(Size)
  fullName: Terminal.Gui.Point.Point(Terminal.Gui.Size)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: .ctor
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 132
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Point Constructor
  remarks: Creates a Point from a Size value.
  example: []
  syntax:
    content: public Point(Size sz)
    parameters:
    - id: sz
      type: Terminal.Gui.Size
    content.vb: Public Sub New(sz As Size)
  overload: Terminal.Gui.Point.#ctor*
  nameWithType.vb: Point.New(Size)
  fullName.vb: Terminal.Gui.Point.New(Terminal.Gui.Size)
  name.vb: New(Size)
- uid: Terminal.Gui.Point.#ctor(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Point.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Point(int, int)
  nameWithType: Point.Point(int, int)
  fullName: Terminal.Gui.Point.Point(int, int)
  type: Constructor
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: .ctor
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 146
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Point Constructor
  remarks: Creates a Point from a specified x,y coordinate pair.
  example: []
  syntax:
    content: public Point(int x, int y)
    parameters:
    - id: x
      type: System.Int32
    - id: y
      type: System.Int32
    content.vb: Public Sub New(x As Integer, y As Integer)
  overload: Terminal.Gui.Point.#ctor*
  nameWithType.vb: Point.New(Integer, Integer)
  fullName.vb: Terminal.Gui.Point.New(Integer, Integer)
  name.vb: New(Integer, Integer)
- uid: Terminal.Gui.Point.IsEmpty
  commentId: P:Terminal.Gui.Point.IsEmpty
  id: IsEmpty
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: Point.IsEmpty
  fullName: Terminal.Gui.Point.IsEmpty
  type: Property
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: IsEmpty
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 163
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: IsEmpty Property
  remarks: Indicates if both X and Y are zero.
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property IsEmpty As Boolean
  overload: Terminal.Gui.Point.IsEmpty*
  attributes:
  - type: System.Text.Json.Serialization.JsonIgnoreAttribute
    ctor: System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor
    arguments: []
- uid: Terminal.Gui.Point.Equals(System.Object)
  commentId: M:Terminal.Gui.Point.Equals(System.Object)
  id: Equals(System.Object)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: Point.Equals(object)
  fullName: Terminal.Gui.Point.Equals(object)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Equals
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 178
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Equals Method
  remarks: Checks equivalence of this Point and another object.
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: Terminal.Gui.Point.Equals*
  nameWithType.vb: Point.Equals(Object)
  fullName.vb: Terminal.Gui.Point.Equals(Object)
  name.vb: Equals(Object)
- uid: Terminal.Gui.Point.GetHashCode
  commentId: M:Terminal.Gui.Point.GetHashCode
  id: GetHashCode
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: Terminal.Gui.Point.GetHashCode()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: GetHashCode
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 194
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: GetHashCode Method
  remarks: Calculates a hashing value.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: Terminal.Gui.Point.GetHashCode*
- uid: Terminal.Gui.Point.Offset(System.Int32,System.Int32)
  commentId: M:Terminal.Gui.Point.Offset(System.Int32,System.Int32)
  id: Offset(System.Int32,System.Int32)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Offset(int, int)
  nameWithType: Point.Offset(int, int)
  fullName: Terminal.Gui.Point.Offset(int, int)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Offset
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 207
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Offset Method
  remarks: Moves the Point a specified distance.
  example: []
  syntax:
    content: public void Offset(int dx, int dy)
    parameters:
    - id: dx
      type: System.Int32
    - id: dy
      type: System.Int32
    content.vb: Public Sub Offset(dx As Integer, dy As Integer)
  overload: Terminal.Gui.Point.Offset*
  nameWithType.vb: Point.Offset(Integer, Integer)
  fullName.vb: Terminal.Gui.Point.Offset(Integer, Integer)
  name.vb: Offset(Integer, Integer)
- uid: Terminal.Gui.Point.ToString
  commentId: M:Terminal.Gui.Point.ToString
  id: ToString
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Point.ToString()
  fullName: Terminal.Gui.Point.ToString()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: ToString
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 221
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: ToString Method
  remarks: Formats the Point as a string in coordinate notation.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: Terminal.Gui.Point.ToString*
- uid: Terminal.Gui.Point.Add(Terminal.Gui.Point,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Point.Add(Terminal.Gui.Point,Terminal.Gui.Size)
  id: Add(Terminal.Gui.Point,Terminal.Gui.Size)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Add(Point, Size)
  nameWithType: Point.Add(Point, Size)
  fullName: Terminal.Gui.Point.Add(Terminal.Gui.Point, Terminal.Gui.Size)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Add
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 233
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Adds the specified Size to the specified Point.
  example: []
  syntax:
    content: public static Point Add(Point pt, Size sz)
    parameters:
    - id: pt
      type: Terminal.Gui.Point
      description: The Point to add.
    - id: sz
      type: Terminal.Gui.Size
      description: The Size to add.
    return:
      type: Terminal.Gui.Point
      description: The Point that is the result of the addition operation.
    content.vb: Public Shared Function Add(pt As Point, sz As Size) As Point
  overload: Terminal.Gui.Point.Add*
- uid: Terminal.Gui.Point.Offset(Terminal.Gui.Point)
  commentId: M:Terminal.Gui.Point.Offset(Terminal.Gui.Point)
  id: Offset(Terminal.Gui.Point)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Offset(Point)
  nameWithType: Point.Offset(Point)
  fullName: Terminal.Gui.Point.Offset(Terminal.Gui.Point)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Offset
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 243
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Translates this Point by the specified Point.
  example: []
  syntax:
    content: public void Offset(Point p)
    parameters:
    - id: p
      type: Terminal.Gui.Point
      description: The Point used offset this Point.
    content.vb: Public Sub Offset(p As Point)
  overload: Terminal.Gui.Point.Offset*
- uid: Terminal.Gui.Point.Subtract(Terminal.Gui.Point,Terminal.Gui.Size)
  commentId: M:Terminal.Gui.Point.Subtract(Terminal.Gui.Point,Terminal.Gui.Size)
  id: Subtract(Terminal.Gui.Point,Terminal.Gui.Size)
  parent: Terminal.Gui.Point
  langs:
  - csharp
  - vb
  name: Subtract(Point, Size)
  nameWithType: Point.Subtract(Point, Size)
  fullName: Terminal.Gui.Point.Subtract(Terminal.Gui.Point, Terminal.Gui.Size)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Types/Point.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Subtract
    path: ../Terminal.Gui/Types/Point.cs
    startLine: 254
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Returns the result of subtracting specified Size from the specified Point.
  example: []
  syntax:
    content: public static Point Subtract(Point pt, Size sz)
    parameters:
    - id: pt
      type: Terminal.Gui.Point
      description: The Point to be subtracted from.
    - id: sz
      type: Terminal.Gui.Size
      description: The Size to subtract from the Point.
    return:
      type: Terminal.Gui.Point
      description: The Point that is the result of the subtraction operation.
    content.vb: Public Shared Function Subtract(pt As Point, sz As Size) As Point
  overload: Terminal.Gui.Point.Subtract*
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  href: Terminal.html
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
  spec.csharp:
  - uid: Terminal
    name: Terminal
    href: Terminal.html
  - name: .
  - uid: Terminal.Gui
    name: Gui
    href: Terminal.Gui.html
  spec.vb:
  - uid: Terminal
    name: Terminal
    href: Terminal.html
  - name: .
  - uid: Terminal.Gui
    name: Gui
    href: Terminal.Gui.html
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Terminal.Gui.Point
  commentId: T:Terminal.Gui.Point
  parent: Terminal.Gui
  href: Terminal.Gui.Point.html
  name: Point
  nameWithType: Point
  fullName: Terminal.Gui.Point
- uid: Terminal.Gui.Point.op_Addition*
  commentId: Overload:Terminal.Gui.Point.op_Addition
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)
  name: operator +
  nameWithType: Point.operator +
  fullName: Terminal.Gui.Point.operator +
  nameWithType.vb: Point.+
  fullName.vb: Terminal.Gui.Point.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Terminal.Gui.Point.op_Addition*
    name: +
    href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Addition(Terminal.Gui.Point,Terminal.Gui.Size)
- uid: Terminal.Gui.Size
  commentId: T:Terminal.Gui.Size
  parent: Terminal.Gui
  href: Terminal.Gui.Size.html
  name: Size
  nameWithType: Size
  fullName: Terminal.Gui.Size
- uid: Terminal.Gui.Point.op_Equality*
  commentId: Overload:Terminal.Gui.Point.op_Equality
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)
  name: operator ==
  nameWithType: Point.operator ==
  fullName: Terminal.Gui.Point.operator ==
  nameWithType.vb: Point.=
  fullName.vb: Terminal.Gui.Point.=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Terminal.Gui.Point.op_Equality*
    name: ==
    href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Equality(Terminal.Gui.Point,Terminal.Gui.Point)
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Terminal.Gui.Point.op_Inequality*
  commentId: Overload:Terminal.Gui.Point.op_Inequality
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)
  name: operator !=
  nameWithType: Point.operator !=
  fullName: Terminal.Gui.Point.operator !=
  nameWithType.vb: Point.<>
  fullName.vb: Terminal.Gui.Point.<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Terminal.Gui.Point.op_Inequality*
    name: '!='
    href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Inequality(Terminal.Gui.Point,Terminal.Gui.Point)
- uid: Terminal.Gui.Point.op_Subtraction*
  commentId: Overload:Terminal.Gui.Point.op_Subtraction
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)
  name: operator -
  nameWithType: Point.operator -
  fullName: Terminal.Gui.Point.operator -
  nameWithType.vb: Point.-
  fullName.vb: Terminal.Gui.Point.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: Terminal.Gui.Point.op_Subtraction*
    name: '-'
    href: Terminal.Gui.Point.html#Terminal.Gui.Point.op_Subtraction(Terminal.Gui.Point,Terminal.Gui.Size)
- uid: Terminal.Gui.Point.op_Explicit*
  commentId: Overload:Terminal.Gui.Point.op_Explicit
  name: explicit operator
  nameWithType: Point.explicit operator
  fullName: Terminal.Gui.Point.explicit operator
  nameWithType.vb: Point.CType
  fullName.vb: Terminal.Gui.Point.CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: Terminal.Gui.Point.#ctor*
  commentId: Overload:Terminal.Gui.Point.#ctor
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.#ctor(Terminal.Gui.Size)
  name: Point
  nameWithType: Point.Point
  fullName: Terminal.Gui.Point.Point
  nameWithType.vb: Point.New
  fullName.vb: Terminal.Gui.Point.New
  name.vb: New
- uid: Terminal.Gui.Point.IsEmpty*
  commentId: Overload:Terminal.Gui.Point.IsEmpty
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.IsEmpty
  name: IsEmpty
  nameWithType: Point.IsEmpty
  fullName: Terminal.Gui.Point.IsEmpty
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.equals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: Terminal.Gui.Point.Equals*
  commentId: Overload:Terminal.Gui.Point.Equals
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.Equals(System.Object)
  name: Equals
  nameWithType: Point.Equals
  fullName: Terminal.Gui.Point.Equals
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode
  - name: (
  - name: )
- uid: Terminal.Gui.Point.GetHashCode*
  commentId: Overload:Terminal.Gui.Point.GetHashCode
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.GetHashCode
  name: GetHashCode
  nameWithType: Point.GetHashCode
  fullName: Terminal.Gui.Point.GetHashCode
- uid: Terminal.Gui.Point.Offset*
  commentId: Overload:Terminal.Gui.Point.Offset
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.Offset(System.Int32,System.Int32)
  name: Offset
  nameWithType: Point.Offset
  fullName: Terminal.Gui.Point.Offset
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.valuetype.tostring
  - name: (
  - name: )
- uid: Terminal.Gui.Point.ToString*
  commentId: Overload:Terminal.Gui.Point.ToString
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.ToString
  name: ToString
  nameWithType: Point.ToString
  fullName: Terminal.Gui.Point.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Terminal.Gui.Point.Add*
  commentId: Overload:Terminal.Gui.Point.Add
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.Add(Terminal.Gui.Point,Terminal.Gui.Size)
  name: Add
  nameWithType: Point.Add
  fullName: Terminal.Gui.Point.Add
- uid: Terminal.Gui.Point.Subtract*
  commentId: Overload:Terminal.Gui.Point.Subtract
  href: Terminal.Gui.Point.html#Terminal.Gui.Point.Subtract(Terminal.Gui.Point,Terminal.Gui.Size)
  name: Subtract
  nameWithType: Point.Subtract
  fullName: Terminal.Gui.Point.Subtract
shouldSkipMarkup: true
