### YamlMime:ManagedReference
items:
- uid: Terminal.Gui.Responder
  commentId: T:Terminal.Gui.Responder
  id: Responder
  parent: Terminal.Gui
  children:
  - Terminal.Gui.Responder.CanFocus
  - Terminal.Gui.Responder.Dispose
  - Terminal.Gui.Responder.Dispose(System.Boolean)
  - Terminal.Gui.Responder.Enabled
  - Terminal.Gui.Responder.HasFocus
  - Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  - Terminal.Gui.Responder.OnCanFocusChanged
  - Terminal.Gui.Responder.OnEnabledChanged
  - Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)
  - Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)
  - Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  - Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  - Terminal.Gui.Responder.OnVisibleChanged
  - Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  - Terminal.Gui.Responder.Visible
  langs:
  - csharp
  - vb
  name: Responder
  nameWithType: Responder
  fullName: Terminal.Gui.Responder
  type: Class
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Responder
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 24
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Responder base class implemented by objects that want to participate on keyboard and mouse input.
  example: []
  syntax:
    content: 'public class Responder : IDisposable'
    content.vb: Public Class Responder Implements IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - Terminal.Gui.View
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Terminal.Gui.Responder.CanFocus
  commentId: P:Terminal.Gui.Responder.CanFocus
  id: CanFocus
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: CanFocus
  nameWithType: Responder.CanFocus
  fullName: Terminal.Gui.Responder.CanFocus
  type: Property
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: CanFocus
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 53
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Gets or sets a value indicating whether this <xref href="Terminal.Gui.Responder" data-throw-if-not-resolved="false"></xref> can focus.
  example: []
  syntax:
    content: public virtual bool CanFocus { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if can focus; otherwise, <code>false</code>.
    content.vb: Public Overridable Property CanFocus As Boolean
  overload: Terminal.Gui.Responder.CanFocus*
- uid: Terminal.Gui.Responder.HasFocus
  commentId: P:Terminal.Gui.Responder.HasFocus
  id: HasFocus
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: HasFocus
  nameWithType: Responder.HasFocus
  fullName: Terminal.Gui.Responder.HasFocus
  type: Property
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: HasFocus
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 59
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Gets or sets a value indicating whether this <xref href="Terminal.Gui.Responder" data-throw-if-not-resolved="false"></xref> has focus.
  example: []
  syntax:
    content: public virtual bool HasFocus { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if has focus; otherwise, <code>false</code>.
    content.vb: Public Overridable ReadOnly Property HasFocus As Boolean
  overload: Terminal.Gui.Responder.HasFocus*
- uid: Terminal.Gui.Responder.Enabled
  commentId: P:Terminal.Gui.Responder.Enabled
  id: Enabled
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: Enabled
  nameWithType: Responder.Enabled
  fullName: Terminal.Gui.Responder.Enabled
  type: Property
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Enabled
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 64
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Gets or sets a value indicating whether this <xref href="Terminal.Gui.Responder" data-throw-if-not-resolved="false"></xref> can respond to user interaction.
  example: []
  syntax:
    content: public virtual bool Enabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property Enabled As Boolean
  overload: Terminal.Gui.Responder.Enabled*
- uid: Terminal.Gui.Responder.Visible
  commentId: P:Terminal.Gui.Responder.Visible
  id: Visible
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: Visible
  nameWithType: Responder.Visible
  fullName: Terminal.Gui.Responder.Visible
  type: Property
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Visible
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 69
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Gets or sets a value indicating whether this <xref href="Terminal.Gui.Responder" data-throw-if-not-resolved="false"></xref> and all its child controls are displayed.
  example: []
  syntax:
    content: public virtual bool Visible { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property Visible As Boolean
  overload: Terminal.Gui.Responder.Visible*
- uid: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  id: ProcessHotKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: ProcessHotKey(KeyEvent)
  nameWithType: Responder.ProcessHotKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: ProcessHotKey
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 94
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: >-
    This method can be overwritten by view that
      want to provide accelerator functionality
      (Alt-key for example).
  remarks: " <p>\r\n   Before keys are sent to the subview on the\r\n   current view, all the views are\r\n   processed and the key is passed to the widgets\r\n   to allow some of them to process the keystroke\r\n   as a hot-key. </p>\r\n<p>\r\n   For example, if you implement a button that\r\n   has a hotkey ok \"o\", you would catch the\r\n   combination Alt-o here.  If the event is\r\n   caught, you must return true to stop the\r\n   keystroke from being dispatched to other\r\n   views.\r\n</p>"
  example: []
  syntax:
    content: public virtual bool ProcessHotKey(KeyEvent kb)
    parameters:
    - id: kb
      type: Terminal.Gui.KeyEvent
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ProcessHotKey(kb As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.ProcessHotKey*
- uid: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  id: ProcessKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: ProcessKey(KeyEvent)
  nameWithType: Responder.ProcessKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: ProcessKey
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 122
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: >-
    If the view is focused, gives the view a

    chance to process the keystroke.
  remarks: >-
    <p>
      Views can override this method if they are
      interested in processing the given keystroke.
      If they consume the keystroke, they must
      return true to stop the keystroke from being
      processed by other widgets or consumed by the
      widget engine.    If they return false, the
      keystroke will be passed using the ProcessColdKey
      method to other views to process.
    </p>

    <p>
      The View implementation does nothing but return false,
      so it is not necessary to call base.ProcessKey if you
      derive directly from View, but you should if you derive
      other View subclasses.
    </p>
  example: []
  syntax:
    content: public virtual bool ProcessKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ProcessKey(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.ProcessKey*
- uid: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  id: ProcessColdKey(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: ProcessColdKey(KeyEvent)
  nameWithType: Responder.ProcessColdKey(KeyEvent)
  fullName: Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: ProcessColdKey
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 149
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: >-
    This method can be overwritten by views that
      want to provide accelerator functionality
      (Alt-key for example), but without
      interefering with normal ProcessKey behavior.
  remarks: " <p>\r\n   After keys are sent to the subviews on the\r\n   current view, all the view are\r\n   processed and the key is passed to the views\r\n   to allow some of them to process the keystroke\r\n   as a cold-key. </p>\r\n<p>\r\n  This functionality is used, for example, by\r\n  default buttons to act on the enter key.\r\n  Processing this as a hot-key would prevent\r\n  non-default buttons from consuming the enter\r\n  keypress when they have the focus.\r\n</p>"
  example: []
  syntax:
    content: public virtual bool ProcessColdKey(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
    content.vb: Public Overridable Function ProcessColdKey(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.ProcessColdKey*
- uid: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  id: OnKeyDown(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnKeyDown(KeyEvent)
  nameWithType: Responder.OnKeyDown(KeyEvent)
  fullName: Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnKeyDown
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 159
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when a key is pressed.
  example: []
  syntax:
    content: public virtual bool OnKeyDown(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
      description: true if the event was handled
    content.vb: Public Overridable Function OnKeyDown(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.OnKeyDown*
- uid: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  commentId: M:Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  id: OnKeyUp(Terminal.Gui.KeyEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnKeyUp(KeyEvent)
  nameWithType: Responder.OnKeyUp(KeyEvent)
  fullName: Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnKeyUp
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 169
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when a key is released.
  example: []
  syntax:
    content: public virtual bool OnKeyUp(KeyEvent keyEvent)
    parameters:
    - id: keyEvent
      type: Terminal.Gui.KeyEvent
      description: Contains the details about the key that produced the event.
    return:
      type: System.Boolean
      description: true if the event was handled
    content.vb: Public Overridable Function OnKeyUp(keyEvent As KeyEvent) As Boolean
  overload: Terminal.Gui.Responder.OnKeyUp*
- uid: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  id: MouseEvent(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: MouseEvent(MouseEvent)
  nameWithType: Responder.MouseEvent(MouseEvent)
  fullName: Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: MouseEvent
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 179
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when a mouse event is generated
  example: []
  syntax:
    content: public virtual bool MouseEvent(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
      description: Contains the details about the mouse event.
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function MouseEvent(mouseEvent As MouseEvent) As Boolean
  overload: Terminal.Gui.Responder.MouseEvent*
- uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  id: OnMouseEnter(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnMouseEnter(MouseEvent)
  nameWithType: Responder.OnMouseEnter(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnMouseEnter
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 191
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: >-
    Called when the mouse first enters the view; the view will now

    receives mouse events until the mouse leaves the view. At which time, <xref href="Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)" data-throw-if-not-resolved="false"></xref>

    will be called.
  example: []
  syntax:
    content: public virtual bool OnMouseEnter(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnMouseEnter(mouseEvent As MouseEvent) As Boolean
  overload: Terminal.Gui.Responder.OnMouseEnter*
- uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  id: OnMouseLeave(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnMouseLeave(MouseEvent)
  nameWithType: Responder.OnMouseLeave(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnMouseLeave
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 202
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: >-
    Called when the mouse has moved outside of the view; the view will no longer receive mouse events (until

    the mouse moves within the view again and <xref href="Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)" data-throw-if-not-resolved="false"></xref> is called).
  example: []
  syntax:
    content: public virtual bool OnMouseLeave(MouseEvent mouseEvent)
    parameters:
    - id: mouseEvent
      type: Terminal.Gui.MouseEvent
      description: ''
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnMouseLeave(mouseEvent As MouseEvent) As Boolean
  overload: Terminal.Gui.Responder.OnMouseLeave*
- uid: Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)
  commentId: M:Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)
  id: OnEnter(Terminal.Gui.View)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnEnter(View)
  nameWithType: Responder.OnEnter(View)
  fullName: Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnEnter
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 212
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when a view gets focus.
  example: []
  syntax:
    content: public virtual bool OnEnter(View view)
    parameters:
    - id: view
      type: Terminal.Gui.View
      description: The view that is losing focus.
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnEnter(view As View) As Boolean
  overload: Terminal.Gui.Responder.OnEnter*
- uid: Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)
  commentId: M:Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)
  id: OnLeave(Terminal.Gui.View)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnLeave(View)
  nameWithType: Responder.OnLeave(View)
  fullName: Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnLeave
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 222
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when a view loses focus.
  example: []
  syntax:
    content: public virtual bool OnLeave(View view)
    parameters:
    - id: view
      type: Terminal.Gui.View
      description: The view that is getting focus.
    return:
      type: System.Boolean
      description: <code>true</code>, if the event was handled, <code>false</code> otherwise.
    content.vb: Public Overridable Function OnLeave(view As View) As Boolean
  overload: Terminal.Gui.Responder.OnLeave*
- uid: Terminal.Gui.Responder.OnCanFocusChanged
  commentId: M:Terminal.Gui.Responder.OnCanFocusChanged
  id: OnCanFocusChanged
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnCanFocusChanged()
  nameWithType: Responder.OnCanFocusChanged()
  fullName: Terminal.Gui.Responder.OnCanFocusChanged()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnCanFocusChanged
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 230
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when the <xref href="Terminal.Gui.Responder.CanFocus" data-throw-if-not-resolved="false"></xref> property from a view is changed.
  example: []
  syntax:
    content: public virtual void OnCanFocusChanged()
    content.vb: Public Overridable Sub OnCanFocusChanged()
  overload: Terminal.Gui.Responder.OnCanFocusChanged*
- uid: Terminal.Gui.Responder.OnEnabledChanged
  commentId: M:Terminal.Gui.Responder.OnEnabledChanged
  id: OnEnabledChanged
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnEnabledChanged()
  nameWithType: Responder.OnEnabledChanged()
  fullName: Terminal.Gui.Responder.OnEnabledChanged()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnEnabledChanged
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 235
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when the <xref href="Terminal.Gui.Responder.Enabled" data-throw-if-not-resolved="false"></xref> property from a view is changed.
  example: []
  syntax:
    content: public virtual void OnEnabledChanged()
    content.vb: Public Overridable Sub OnEnabledChanged()
  overload: Terminal.Gui.Responder.OnEnabledChanged*
- uid: Terminal.Gui.Responder.OnVisibleChanged
  commentId: M:Terminal.Gui.Responder.OnVisibleChanged
  id: OnVisibleChanged
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: OnVisibleChanged()
  nameWithType: Responder.OnVisibleChanged()
  fullName: Terminal.Gui.Responder.OnVisibleChanged()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: OnVisibleChanged
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 240
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Method invoked when the <xref href="Terminal.Gui.Responder.Visible" data-throw-if-not-resolved="false"></xref> property from a view is changed.
  example: []
  syntax:
    content: public virtual void OnVisibleChanged()
    content.vb: Public Overridable Sub OnVisibleChanged()
  overload: Terminal.Gui.Responder.OnVisibleChanged*
- uid: Terminal.Gui.Responder.Dispose(System.Boolean)
  commentId: M:Terminal.Gui.Responder.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: Responder.Dispose(bool)
  fullName: Terminal.Gui.Responder.Dispose(bool)
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Dispose
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 274
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
  remarks: >-
    If disposing equals true, the method has been called directly

    or indirectly by a user's code. Managed and unmanaged resources

    can be disposed.

    If disposing equals false, the method has been called by the

    runtime from inside the finalizer and you should not reference

    other objects. Only unmanaged resources can be disposed.
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Terminal.Gui.Responder.Dispose*
  nameWithType.vb: Responder.Dispose(Boolean)
  fullName.vb: Terminal.Gui.Responder.Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: Terminal.Gui.Responder.Dispose
  commentId: M:Terminal.Gui.Responder.Dispose
  id: Dispose
  parent: Terminal.Gui.Responder
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Responder.Dispose()
  fullName: Terminal.Gui.Responder.Dispose()
  type: Method
  source:
    remote:
      path: Terminal.Gui/Input/Responder.cs
      branch: v2_develop
      repo: tig:tig/Terminal.Gui.git
    id: Dispose
    path: ../Terminal.Gui/Input/Responder.cs
    startLine: 288
  assemblies:
  - Terminal.Gui
  namespace: Terminal.Gui
  summary: Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resource.
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: Terminal.Gui.Responder.Dispose*
  implements:
  - System.IDisposable.Dispose
references:
- uid: Terminal.Gui
  commentId: N:Terminal.Gui
  href: Terminal.html
  name: Terminal.Gui
  nameWithType: Terminal.Gui
  fullName: Terminal.Gui
  spec.csharp:
  - uid: Terminal
    name: Terminal
    href: Terminal.html
  - name: .
  - uid: Terminal.Gui
    name: Gui
    href: Terminal.Gui.html
  spec.vb:
  - uid: Terminal
    name: Terminal
    href: Terminal.html
  - name: .
  - uid: Terminal.Gui
    name: Gui
    href: Terminal.Gui.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Terminal.Gui.Responder
  commentId: T:Terminal.Gui.Responder
  parent: Terminal.Gui
  href: Terminal.Gui.Responder.html
  name: Responder
  nameWithType: Responder
  fullName: Terminal.Gui.Responder
- uid: Terminal.Gui.Responder.CanFocus*
  commentId: Overload:Terminal.Gui.Responder.CanFocus
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.CanFocus
  name: CanFocus
  nameWithType: Responder.CanFocus
  fullName: Terminal.Gui.Responder.CanFocus
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Terminal.Gui.Responder.HasFocus*
  commentId: Overload:Terminal.Gui.Responder.HasFocus
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.HasFocus
  name: HasFocus
  nameWithType: Responder.HasFocus
  fullName: Terminal.Gui.Responder.HasFocus
- uid: Terminal.Gui.Responder.Enabled*
  commentId: Overload:Terminal.Gui.Responder.Enabled
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.Enabled
  name: Enabled
  nameWithType: Responder.Enabled
  fullName: Terminal.Gui.Responder.Enabled
- uid: Terminal.Gui.Responder.Visible*
  commentId: Overload:Terminal.Gui.Responder.Visible
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.Visible
  name: Visible
  nameWithType: Responder.Visible
  fullName: Terminal.Gui.Responder.Visible
- uid: Terminal.Gui.Responder.ProcessHotKey*
  commentId: Overload:Terminal.Gui.Responder.ProcessHotKey
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.ProcessHotKey(Terminal.Gui.KeyEvent)
  name: ProcessHotKey
  nameWithType: Responder.ProcessHotKey
  fullName: Terminal.Gui.Responder.ProcessHotKey
- uid: Terminal.Gui.KeyEvent
  commentId: T:Terminal.Gui.KeyEvent
  parent: Terminal.Gui
  href: Terminal.Gui.KeyEvent.html
  name: KeyEvent
  nameWithType: KeyEvent
  fullName: Terminal.Gui.KeyEvent
- uid: Terminal.Gui.Responder.ProcessKey*
  commentId: Overload:Terminal.Gui.Responder.ProcessKey
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.ProcessKey(Terminal.Gui.KeyEvent)
  name: ProcessKey
  nameWithType: Responder.ProcessKey
  fullName: Terminal.Gui.Responder.ProcessKey
- uid: Terminal.Gui.Responder.ProcessColdKey*
  commentId: Overload:Terminal.Gui.Responder.ProcessColdKey
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.ProcessColdKey(Terminal.Gui.KeyEvent)
  name: ProcessColdKey
  nameWithType: Responder.ProcessColdKey
  fullName: Terminal.Gui.Responder.ProcessColdKey
- uid: Terminal.Gui.Responder.OnKeyDown*
  commentId: Overload:Terminal.Gui.Responder.OnKeyDown
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnKeyDown(Terminal.Gui.KeyEvent)
  name: OnKeyDown
  nameWithType: Responder.OnKeyDown
  fullName: Terminal.Gui.Responder.OnKeyDown
- uid: Terminal.Gui.Responder.OnKeyUp*
  commentId: Overload:Terminal.Gui.Responder.OnKeyUp
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnKeyUp(Terminal.Gui.KeyEvent)
  name: OnKeyUp
  nameWithType: Responder.OnKeyUp
  fullName: Terminal.Gui.Responder.OnKeyUp
- uid: Terminal.Gui.Responder.MouseEvent*
  commentId: Overload:Terminal.Gui.Responder.MouseEvent
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.MouseEvent(Terminal.Gui.MouseEvent)
  name: MouseEvent
  nameWithType: Responder.MouseEvent
  fullName: Terminal.Gui.Responder.MouseEvent
- uid: Terminal.Gui.MouseEvent
  commentId: T:Terminal.Gui.MouseEvent
  parent: Terminal.Gui
  href: Terminal.Gui.MouseEvent.html
  name: MouseEvent
  nameWithType: MouseEvent
  fullName: Terminal.Gui.MouseEvent
- uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  name: OnMouseLeave(MouseEvent)
  nameWithType: Responder.OnMouseLeave(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
    name: OnMouseLeave
    href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  - name: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    href: Terminal.Gui.MouseEvent.html
  - name: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
    name: OnMouseLeave
    href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  - name: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    href: Terminal.Gui.MouseEvent.html
  - name: )
- uid: Terminal.Gui.Responder.OnMouseEnter*
  commentId: Overload:Terminal.Gui.Responder.OnMouseEnter
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  name: OnMouseEnter
  nameWithType: Responder.OnMouseEnter
  fullName: Terminal.Gui.Responder.OnMouseEnter
- uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  commentId: M:Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  parent: Terminal.Gui.Responder
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  name: OnMouseEnter(MouseEvent)
  nameWithType: Responder.OnMouseEnter(MouseEvent)
  fullName: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  spec.csharp:
  - uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
    name: OnMouseEnter
    href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  - name: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    href: Terminal.Gui.MouseEvent.html
  - name: )
  spec.vb:
  - uid: Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
    name: OnMouseEnter
    href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseEnter(Terminal.Gui.MouseEvent)
  - name: (
  - uid: Terminal.Gui.MouseEvent
    name: MouseEvent
    href: Terminal.Gui.MouseEvent.html
  - name: )
- uid: Terminal.Gui.Responder.OnMouseLeave*
  commentId: Overload:Terminal.Gui.Responder.OnMouseLeave
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnMouseLeave(Terminal.Gui.MouseEvent)
  name: OnMouseLeave
  nameWithType: Responder.OnMouseLeave
  fullName: Terminal.Gui.Responder.OnMouseLeave
- uid: Terminal.Gui.Responder.OnEnter*
  commentId: Overload:Terminal.Gui.Responder.OnEnter
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnEnter(Terminal.Gui.View)
  name: OnEnter
  nameWithType: Responder.OnEnter
  fullName: Terminal.Gui.Responder.OnEnter
- uid: Terminal.Gui.View
  commentId: T:Terminal.Gui.View
  parent: Terminal.Gui
  href: Terminal.Gui.View.html
  name: View
  nameWithType: View
  fullName: Terminal.Gui.View
- uid: Terminal.Gui.Responder.OnLeave*
  commentId: Overload:Terminal.Gui.Responder.OnLeave
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnLeave(Terminal.Gui.View)
  name: OnLeave
  nameWithType: Responder.OnLeave
  fullName: Terminal.Gui.Responder.OnLeave
- uid: Terminal.Gui.Responder.CanFocus
  commentId: P:Terminal.Gui.Responder.CanFocus
  parent: Terminal.Gui.Responder
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.CanFocus
  name: CanFocus
  nameWithType: Responder.CanFocus
  fullName: Terminal.Gui.Responder.CanFocus
- uid: Terminal.Gui.Responder.OnCanFocusChanged*
  commentId: Overload:Terminal.Gui.Responder.OnCanFocusChanged
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnCanFocusChanged
  name: OnCanFocusChanged
  nameWithType: Responder.OnCanFocusChanged
  fullName: Terminal.Gui.Responder.OnCanFocusChanged
- uid: Terminal.Gui.Responder.Enabled
  commentId: P:Terminal.Gui.Responder.Enabled
  parent: Terminal.Gui.Responder
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.Enabled
  name: Enabled
  nameWithType: Responder.Enabled
  fullName: Terminal.Gui.Responder.Enabled
- uid: Terminal.Gui.Responder.OnEnabledChanged*
  commentId: Overload:Terminal.Gui.Responder.OnEnabledChanged
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnEnabledChanged
  name: OnEnabledChanged
  nameWithType: Responder.OnEnabledChanged
  fullName: Terminal.Gui.Responder.OnEnabledChanged
- uid: Terminal.Gui.Responder.Visible
  commentId: P:Terminal.Gui.Responder.Visible
  parent: Terminal.Gui.Responder
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.Visible
  name: Visible
  nameWithType: Responder.Visible
  fullName: Terminal.Gui.Responder.Visible
- uid: Terminal.Gui.Responder.OnVisibleChanged*
  commentId: Overload:Terminal.Gui.Responder.OnVisibleChanged
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.OnVisibleChanged
  name: OnVisibleChanged
  nameWithType: Responder.OnVisibleChanged
  fullName: Terminal.Gui.Responder.OnVisibleChanged
- uid: Terminal.Gui.Responder.Dispose*
  commentId: Overload:Terminal.Gui.Responder.Dispose
  href: Terminal.Gui.Responder.html#Terminal.Gui.Responder.Dispose(System.Boolean)
  name: Dispose
  nameWithType: Responder.Dispose
  fullName: Terminal.Gui.Responder.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.idisposable.dispose
  - name: (
  - name: )
shouldSkipMarkup: true
